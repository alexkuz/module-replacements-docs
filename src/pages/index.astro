---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import { nativeReplacements, microUtilsReplacements, preferredReplacements, type ModuleReplacement } from 'module-replacements';

const nameSorter = (a: ModuleReplacement, b: ModuleReplacement) => a.moduleName > b.moduleName ? 1 : -1;

let native = nativeReplacements.moduleReplacements.toSorted(nameSorter);
let microUtils = microUtilsReplacements.moduleReplacements.toSorted(nameSorter);
let preferred = preferredReplacements.moduleReplacements.toSorted(nameSorter);

---

<Layout title="Module Replacements">
	<main>
		<div class="header">
			<h1>
				<a href="https://github.com/es-tooling/module-replacements">Module Replacements</a>
			</h1>
			<input id="filter" class="filter" type="search" placeholder="Filter modules" />
		</div>
		<h2 id="native-list-title">Native replacements</h2>
		<ul id="native-list" class="replacement-card-grid">
		{native.map((rep) => (
			<Card replacement={rep} />
		))}
		</ul>
		<hr />
		<h2 id="utils-list-title">Micro utilities</h2>
		<ul id="utils-list" class="replacement-card-grid">
		{microUtils.map((rep) => (
			<Card replacement={rep} />
		))}
		</ul>
		<hr />
		<h2 id="preferred-list-title">Preferred replacements</h2>
		<ul id="preferred-list" class="replacement-card-list">
		{preferred.map((rep) => (
			<Card replacement={rep} />
		))}
		</ul>
	</main>
</Layout>

<style>
.header {
	display: flex;
	align-items: center;
	justify-content: space-between;
}

.filter {
	margin-block: 20px 0;
}

.replacement-card-grid {
	display: grid;
	padding: 0;
	gap: 20px;
	grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
	align-items: start;
}

.replacement-card-list {
	padding: 0;
	display: flex;
	flex-direction: column;
	gap: 20px;
}

hr {
	margin-block: 40px;
}
</style>

<script>
function applyFilter(filter: string) {
	return (acc: boolean, li: HTMLLIElement) => {
		const title = li.querySelector('h3')?.textContent || '';
		const show = !filter || title.toLowerCase().includes(filter);
		li.style.display = show ? 'block' : 'none';

		return acc || show;
	};
}

function filterList(filter: string, listId: string) {
	const reducer = applyFilter(filter);
	const hasItems = Array.from(document.querySelectorAll(listId + ' > li')).reduce(reducer, false);

	const listEl = document.querySelector(listId);
	if (listEl instanceof HTMLElement) {
		listEl.style.display = hasItems ? 'grid' : 'none';
	}

	const titleEl = document.querySelector(listId + '-title');
	if (titleEl instanceof HTMLElement) {
		titleEl.style.display = hasItems ? 'block' : 'none';
	}
}

document.querySelector('#filter').addEventListener('input', (e) => {
	if (!(e.target instanceof HTMLInputElement)) return;
	const filter = e.target.value.toLowerCase();

	filterList(filter, '#native-list');
	filterList(filter, '#utils-list');
	filterList(filter, '#preferred-list');
});
</script>